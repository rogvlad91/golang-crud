// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package mock_candidate_vacancy_svc is a generated GoMock package.
package mock_candidate_vacancy_svc

import (
	context "context"
	candidate_vacancies "homework-7/internal/svc/candidate_vacancies"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCandidateVacanciesProcessor is a mock of CandidateVacanciesProcessor interface.
type MockCandidateVacanciesProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockCandidateVacanciesProcessorMockRecorder
}

// MockCandidateVacanciesProcessorMockRecorder is the mock recorder for MockCandidateVacanciesProcessor.
type MockCandidateVacanciesProcessorMockRecorder struct {
	mock *MockCandidateVacanciesProcessor
}

// NewMockCandidateVacanciesProcessor creates a new mock instance.
func NewMockCandidateVacanciesProcessor(ctrl *gomock.Controller) *MockCandidateVacanciesProcessor {
	mock := &MockCandidateVacanciesProcessor{ctrl: ctrl}
	mock.recorder = &MockCandidateVacanciesProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCandidateVacanciesProcessor) EXPECT() *MockCandidateVacanciesProcessorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCandidateVacanciesProcessor) Create(ctx context.Context, dto candidate_vacancies.CreateDto) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCandidateVacanciesProcessorMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCandidateVacanciesProcessor)(nil).Create), ctx, dto)
}

// DeleteResponseForVacancy mocks base method.
func (m *MockCandidateVacanciesProcessor) DeleteResponseForVacancy(ctx context.Context, vacancyId, candidateId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResponseForVacancy", ctx, vacancyId, candidateId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResponseForVacancy indicates an expected call of DeleteResponseForVacancy.
func (mr *MockCandidateVacanciesProcessorMockRecorder) DeleteResponseForVacancy(ctx, vacancyId, candidateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResponseForVacancy", reflect.TypeOf((*MockCandidateVacanciesProcessor)(nil).DeleteResponseForVacancy), ctx, vacancyId, candidateId)
}

// GetCandidatesByVacancyId mocks base method.
func (m *MockCandidateVacanciesProcessor) GetCandidatesByVacancyId(ctx context.Context, vacancyId string) ([]*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidatesByVacancyId", ctx, vacancyId)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidatesByVacancyId indicates an expected call of GetCandidatesByVacancyId.
func (mr *MockCandidateVacanciesProcessorMockRecorder) GetCandidatesByVacancyId(ctx, vacancyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidatesByVacancyId", reflect.TypeOf((*MockCandidateVacanciesProcessor)(nil).GetCandidatesByVacancyId), ctx, vacancyId)
}

// GetVacanciesByCandidate mocks base method.
func (m *MockCandidateVacanciesProcessor) GetVacanciesByCandidate(ctx context.Context, candidateId string) ([]*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVacanciesByCandidate", ctx, candidateId)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVacanciesByCandidate indicates an expected call of GetVacanciesByCandidate.
func (mr *MockCandidateVacanciesProcessorMockRecorder) GetVacanciesByCandidate(ctx, candidateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVacanciesByCandidate", reflect.TypeOf((*MockCandidateVacanciesProcessor)(nil).GetVacanciesByCandidate), ctx, candidateId)
}
